module frecuenciometro (
    input clk,
    input rst,
    input signal_in,
    output reg [6:0] seg,
    output reg [3:0] display_control
);

    reg [31:0] pulse_count = 0;
    reg [31:0] clk_ctr = 0;
    reg [31:0] freq = 0;
    reg current_signal = 0;
    
    localparam base_freq = 50_000_000;

    reg [15:0] freq_bcd;
    reg [1:0] display_select;
    reg [3:0] current_digit;
    reg [19:0] refresh_count;

    always @(posedge clk or posedge rst) 
    begin
        if(rst) 
            begin
            pulse_count <= 0;
            clk_ctr <= 0;
            freq <= 0;
            end 
        else 
            begin
            // DetecciÃ³n de flanco de subida en signal_in
            if (current_signal == 0 && signal_in == 1)
                begin
                pulse_count <= pulse_count + 1;
                current_signal <= signal_in;
                end
            else
                begin
                current_signal <= signal_in;
                end
            if (clk_ctr < base_freq) 
                begin
                clk_ctr <= clk_ctr + 1;
                end 
            else 
                begin
                freq <= pulse_count;
                pulse_count <= 0;
                clk_ctr <= 0;
                end
        end
    end

    always @(posedge clk) 
    begin
        freq_bcd[3:0]   <= freq % 10;        // Unidades
        freq_bcd[7:4]   <= (freq / 10) % 10; // Decenas
        freq_bcd[11:8]  <= (freq / 100) % 10;// Centenas
        freq_bcd[15:12] <= (freq / 1000) % 10;// Mil
    end

    always @(posedge clk) 
    begin
        refresh_count <= refresh_count + 1;
        if(refresh_count == 20000) 
        begin 
            refresh_count <= 0;
            display_select <= display_select + 1;
        end
    end

    always @(*) 
    begin
        case(display_select)
            2'b00: 
                begin 
                    display_control = 4'b1110; 
                    current_digit = freq_bcd[3:0];   
                end // Unidades
            2'b01: 
                begin  
                    display_control = 4'b1101; 
                    current_digit = freq_bcd[7:4];   
                end // Decenas
            2'b10: 
                begin 
                    display_control = 4'b1011; 
                    current_digit = freq_bcd[11:8];  
                end // Centenas
            2'b11: 
                begin  
                    display_control = 4'b0111; 
                    current_digit = freq_bcd[15:12]; 
                end // Mil
        endcase
    end

    always @(*) 
    begin
        case (current_digit)
            4'd0: seg = 7'b1000000;
            4'd1: seg = 7'b1111001;
            4'd2: seg = 7'b0100100;
            4'd3: seg = 7'b0110000;
            4'd4: seg = 7'b0011001;
            4'd5: seg = 7'b0010010;
            4'd6: seg = 7'b0000010;
            4'd7: seg = 7'b1111000;
            4'd8: seg = 7'b0000000;
            4'd9: seg = 7'b0010000;
            default: seg = 7'b1111111;
        endcase
    end

endmodule